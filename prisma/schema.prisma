// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String?  @unique
  firstName String
  lastName  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts          Post[]     @relation("UserPosts")
  clerkPosts     Post[]     @relation("ClerkUserPosts")
  comments       Comment[]  @relation("UserComments")
  clerkComments  Comment[]  @relation("ClerkUserComments")
  reactions      Reaction[] @relation("UserReactions")
  clerkReactions Reaction[] @relation("ClerkUserReactions")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User       @relation("UserPosts", fields: [userId], references: [id])
  userId      Int
  clerkUser   User?      @relation("ClerkUserPosts", fields: [clerkUserId], references: [clerkId])
  clerkUserId String?
  comments    Comment[]
  reactions   Reaction[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User       @relation("UserComments", fields: [userId], references: [id])
  userId          Int
  clerkUser       User?      @relation("ClerkUserComments", fields: [clerkUserId], references: [clerkId])
  clerkUserId     String?
  post            Post       @relation(fields: [postId], references: [id])
  postId          Int
  reactions       Reaction[]
  parentComment   Comment?   @relation("ParentCommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  replies         Comment[]  @relation("ParentCommentReplies")

  @@index([parentCommentId])
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user        User     @relation("UserReactions", fields: [userId], references: [id])
  userId      Int
  clerkUser   User?    @relation("ClerkUserReactions", fields: [clerkUserId], references: [clerkId])
  clerkUserId String?
  post        Post?    @relation(fields: [postId], references: [id])
  postId      Int?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   Int?

  @@unique([userId, postId, commentId])
}
